{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Opeice","Xpeice","CreateGrid","state","boardOn","whenClicked","bind","event","this","setState","Board","label","renderBoard","React","Component","squares","Array","fill","xIsNext","columnIn","input","includes","column","slice","reverse","element","i","calculateWinner","checkColumn","handleClick","status","winner","renderSquare","Game","winningArrays","length","a","b","c","d","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45b66936.chunk.js","sourcesContent":["/*\nName: Anthony Barros \nStudent Number: 250974431\n\nDescription: \n\nThis is a connect4 game built with simplistic functionality\n\nclass requirements:\n\nIn the simplified version,you’ll need to implement the following:\n\n-Two players represented by two colors (red and yellow) take turns in selecting a grid-cell\n-Create the grid using buttons\n-When a user clicks on one of the buttons,it turns into the current player’s color and becomes unclickable. -If 4 buttons ofthe same color were connected (either vertically or horizontally),the player of that color is declared the winner,and the game is over.\n-If all the cells were occupied,the game is over.\n\nTODO: \n\nwant to include \"time travel\" using the tutorial here: https://reactjs.org/tutorial/tutorial.html#completing-the-game\n\nsimplified class requirements\n*/\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n  }\n\nfunction Opeice(props) {\n  return (\n    <div className = 'Opeice'>\n      {props.value}\n    </div>\n  );\n}\n\nfunction Xpeice(props) {\n  return (\n    <div className = 'Xpeice'>\n      {props.value}\n    </div>\n  );\n}\n\nclass CreateGrid extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        boardOn: false,\n      };\n      this.whenClicked = this.whenClicked.bind(this);\n    }\n\n    whenClicked(event) {\n      this.setState({\n        boardOn: !this.state.boardOn\n      });\n    }\n\n    renderBoard() {\n      if (this.state.boardOn){\n        return <Board />;\n      } else {\n        return null;\n      }\n    }\n\n    render() {\n      return (\n        <div> \n          <button className = \"gridButton\" onClick = {this.whenClicked} label = \"create the board\">\n            Turn the board ON or OFF\n          </button>\n          <div>\n            {this.renderBoard()}\n          </div>\n        </div>\n      );\n    }\n}\n\n/*\nabove this is where im testing the button that instantiates the grid\n*/ \n  \nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          squares: Array(42).fill(null),\n          xIsNext: true,\n        };\n    }\n\n    checkColumn(columnIn, input, squares) {\n\n      if (columnIn.includes(input)){\n        const column = columnIn.slice().reverse();\n\n        for (let element of column) {\n            if (squares[element] === null) {\n                squares[element] = this.state.xIsNext ? <Xpeice value = 'X'/> : <Opeice value = 'O'/>;\n                this.setState({\n                    squares: squares,\n                    xIsNext: !this.state.xIsNext\n                });\n                break;\n            }   \n        }\n      }\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n\n        const column0 = [0,7,14,21,28,35];\n        const column1 = [1,8,15,22,29,36];\n        const column2 = [2,9,16,23,30,37];\n        const column3 = [3,10,17,24,31,38];\n        const column4 = [4,11,18,25,32,39];\n        const column5 = [5,12,19,26,33,40];\n        const column6 = [6,13,20,27,34,41];\n\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        \n        //check which column the selected cell belongs to\n        //then figure out which of the cells below the one selected are free\n        //populate the cell at the bottom of the column selected if its value is null\n\n        this.checkColumn(column0, i, squares);\n\n        this.checkColumn(column1, i, squares);\n\n        this.checkColumn(column2, i, squares);\n\n        this.checkColumn(column3, i, squares);\n\n        this.checkColumn(column4, i, squares);\n\n        this.checkColumn(column5, i, squares);\n\n        this.checkColumn(column6, i, squares);\n    }    \n\n    renderSquare(i) {\n      return <Square value = {this.state.squares[i]} onClick={() => this.handleClick(i)}/>;\n    }\n  \n    render() {\n        const winner = calculateWinner(this.state.squares);\n        let status;\n        if (winner) {\n          status = 'Winner: ' + winner;\n        } else {\n          status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n  \n      return (\n        <div>\n          <div className=\"status\">{status}</div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n            {this.renderSquare(6)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n            {this.renderSquare(9)}\n            {this.renderSquare(10)}\n            {this.renderSquare(11)}\n            {this.renderSquare(12)}\n            {this.renderSquare(13)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(14)}\n            {this.renderSquare(15)}\n            {this.renderSquare(16)}\n            {this.renderSquare(17)}\n            {this.renderSquare(18)}\n            {this.renderSquare(19)}\n            {this.renderSquare(20)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(21)}\n            {this.renderSquare(22)}\n            {this.renderSquare(23)}\n            {this.renderSquare(24)}\n            {this.renderSquare(25)}\n            {this.renderSquare(26)}\n            {this.renderSquare(27)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(28)}\n            {this.renderSquare(29)}\n            {this.renderSquare(30)}\n            {this.renderSquare(31)}\n            {this.renderSquare(32)}\n            {this.renderSquare(33)}\n            {this.renderSquare(34)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(35)}\n            {this.renderSquare(36)}\n            {this.renderSquare(37)}\n            {this.renderSquare(38)}\n            {this.renderSquare(39)}\n            {this.renderSquare(40)}\n            {this.renderSquare(41)}\n          </div>\n        </div>\n      );\n    }\n  }\n  \nclass Game extends React.Component {\n    render() {\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <CreateGrid />\n          </div>\n          <div className=\"game-info\">\n            <div>{/* status */}</div>\n            <ol>{/* TODO */}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n\nfunction calculateWinner(squares) {\n\n    const winningArrays = [\n        [0, 1, 2, 3],\n        [41, 40, 39, 38],\n        [7, 8, 9, 10],\n        [34, 33, 32, 31],\n        [14, 15, 16, 17],\n        [27, 26, 25, 24],\n        [21, 22, 23, 24],\n        [20, 19, 18, 17],\n        [28, 29, 30, 31],\n        [13, 12, 11, 10],\n        [35, 36, 37, 38],\n        [6, 5, 4, 3],\n        [0, 7, 14, 21],\n        [41, 34, 27, 20],\n        [1, 8, 15, 22],\n        [40, 33, 26, 19],\n        [2, 9, 16, 23],\n        [39, 32, 25, 18],\n        [3, 10, 17, 24],\n        [38, 31, 24, 17],\n        [4, 11, 18, 25],\n        [37, 30, 23, 16],\n        [5, 12, 19, 26],\n        [36, 29, 22, 15],\n        [6, 13, 20, 27],\n        [35, 28, 21, 14],\n        [0, 8, 16, 24],\n        [41, 33, 25, 17],\n        [7, 15, 23, 31],\n        [34, 26, 18, 10],\n        [14, 22, 30, 38],\n        [27, 19, 11, 3],\n        [35, 29, 23, 17],\n        [6, 12, 18, 24],\n        [28, 22, 16, 10],\n        [13, 19, 25, 31],\n        [21, 15, 9, 3],\n        [20, 26, 32, 38],\n        [36, 30, 24, 18],\n        [5, 11, 17, 23],\n        [37, 31, 25, 19],\n        [4, 10, 16, 22],\n        [2, 10, 18, 26],\n        [39, 31, 23, 15],\n        [1, 9, 17, 25],\n        [40, 32, 24, 16],\n        [9, 17, 25, 33],\n        [8, 16, 24, 32],\n        [11, 17, 23, 29],\n        [12, 18, 24, 30],\n        [1, 2, 3, 4],\n        [5, 4, 3, 2],\n        [8, 9, 10, 11],\n        [12, 11, 10, 9],\n        [15, 16, 17, 18],\n        [19, 18, 17, 16],\n        [22, 23, 24, 25],\n        [26, 25, 24, 23],\n        [29, 30, 31, 32],\n        [33, 32, 31, 30],\n        [36, 37, 38, 39],\n        [40, 39, 38, 37],\n        [7, 14, 21, 28],\n        [8, 15, 22, 29],\n        [9, 16, 23, 30],\n        [10, 17, 24, 31],\n        [11, 18, 25, 32],\n        [12, 19, 26, 33],\n        [13, 20, 27, 34],\n      ]\n\n    for (let i = 0; i < winningArrays.length; i++) {\n        let [a, b, c, d] = winningArrays[i];\n        if (squares[a] !== null && squares[b] !== null && squares[c] !== null && squares[d] !== null ) {\n          if (squares[a].props.value && squares[a].props.value === squares[b].props.value && squares[a].props.value === squares[c].props.value && squares[a].props.value === squares[d].props.value) {\n            return squares[a].props.value;\n          }\n        } \n    }\n\n    if (!squares.includes(null)){\n      return 'no one! It is a draw';\n    }\n    \n    return null;\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}